query getIssues($login: String!, $state: [IssueState!], $count: Int!) {
  user(login: $login) {
    issues(first: $count, orderBy: {field: CREATED_AT, direction: DESC}, states: $state) {
      nodes {
        ...ShortIssueRowItem
      }
    }
  }
}

query getPullRequests($login: String!, $count: Int!)  {
  user(login: $login) {
    pullRequests(first: $count, orderBy: {field: CREATED_AT, direction: DESC}) {
      nodes {
       ...ShortPullRequestRowItem
      }
    }
  }
}

query getIssue($login: String!, $repo: String!, $number: Int!) {
  repositoryOwner(login: $login) {
    repository(name: $repo) {
      issue(number: $number) {
        ... FullIssue
      }
    }
  }
}

query getIssueTimeline($login: String!, $repo: String!, $number: Int!, $page: String) {
  repositoryOwner(login: $login) {
    repository(name: $repo) {
      issue(number: $number) {
        ... FullIssue
        timeline(first: 30, after: $page) {
          totalCount
          pageInfo {
            endCursor
            hasNextPage
            hasPreviousPage
            startCursor
          }
          nodes {
            __typename
            ... on Commit {
              author {
                name
                avatarUrl
              }
              message
              abbreviatedOid
              oid
              commitUrl
              authoredDate
              committedViaWeb
              id
            }
            ... on IssueComment {
              author {
                login
                avatarUrl
              }
              createdAt
              authorAssociation
              bodyHTML
              body
              id
              updatedAt
              viewerCanReact
              viewerCanDelete
              viewerCanUpdate
              viewerDidAuthor
              viewerCanMinimize
              viewerCannotUpdateReasons
              reactionGroups {
                content
                createdAt
                viewerHasReacted
              }
            }
            ... on CrossReferencedEvent {
              createdAt
              isCrossRepository
              referencedAt
              source {
                ... ShortPullRequestRowItem
                ... ShortIssueRowItem
              }
              willCloseTarget
                actor { ... ShortActor }
            }
            ... on ClosedEvent {
              actor { ... ShortActor }
              createdAt
              closer {
                ... on Commit {
                  abbreviatedOid
                  author {
                    name
                    avatarUrl
                  }
                  message
                }
                ... on PullRequest {
                  number
                  author {
                    avatarUrl
                    login
                  }
                  merged
                }
              }
            }
            ... on ReopenedEvent {
              actor { ... ShortActor }
              createdAt
            }
            ... on SubscribedEvent {
              actor { ... ShortActor }
              createdAt
            }
            ... on UnsubscribedEvent {
              actor { ... ShortActor }
              createdAt
            }
            ... on ReferencedEvent {
              actor { ... ShortActor }
              createdAt
              commitRepository {
                nameWithOwner
              }
              isCrossRepository
              isDirectReference
              commit {
                message
                committedDate
                abbreviatedOid
              }
              subject {
                ... on Issue {
                  number
                  author {
                    login
                    avatarUrl
                  }
                  repository {
                    nameWithOwner
                  }
                }
                ... on PullRequest {
                  number
                  author {
                    login
                    avatarUrl
                  }
                  repository {
                    nameWithOwner
                  }
                }
              }
            }
            ... on AssignedEvent {
              actor { ... ShortActor }
              createdAt
              user {
                login
                avatarUrl
              }
            }
            ... on UnassignedEvent {
              actor { ... ShortActor }
              createdAt
              user {
                login
                avatarUrl
              }
            }
            ... on LabeledEvent {
              actor { ... ShortActor }
              createdAt
              label {
                color
                name
                isDefault
              }
            }
            ... on UnlabeledEvent {
              actor { ... ShortActor }
              createdAt
              label {
                color
                name
                isDefault
              }
            }
            ... on MilestonedEvent {
              actor { ... ShortActor }
              createdAt
              milestoneTitle
            }
            ... on DemilestonedEvent {
              actor { ... ShortActor }
              createdAt
              milestoneTitle
            }
            ... on RenamedTitleEvent {
              actor { ... ShortActor }
              createdAt
              currentTitle
              previousTitle
            }
            ... on LockedEvent {
              actor { ... ShortActor }
              createdAt
              lockReason
              lockable {
                activeLockReason
              }
            }
            ... on UnlockedEvent {
              actor { ... ShortActor }
              createdAt
              lockable {
                activeLockReason
              }
            }
            ... on TransferredEvent {
              actor { ... ShortActor }
              createdAt
              fromRepository {
                id
              }
              issue {
                number
              }
            }
          }
        }
      }
    }
  }
}