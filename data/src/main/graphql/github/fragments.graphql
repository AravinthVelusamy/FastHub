fragment ShortRepoRowItem on Repository {
    id
    databaseId
    name
    nameWithOwner
    isFork
    forkCount
    issues(first: 0, states: OPEN) {
      totalCount
    }
    pullRequests(first: 0, states: OPEN) {
          totalCount
    }
    forks(first: 0) {
      totalCount
    }
    isPrivate
    stargazers(first: 1) {
      totalCount
    }
    watchers(first: 1) {
      totalCount
    }
}

fragment ShortIssueRowItem on Issue {
    id
    databaseId
    number
    title
    repository {
      nameWithOwner
    }
    comments(first: 1) {
      totalCount
    }
    url
}

fragment ShortPullRequestRowItem on PullRequest {
    id
    databaseId
    number
    title
    repository {
      nameWithOwner
    }
    comments(first: 1) {
      totalCount
    }
    state
    url
}


fragment ShortUserRowItem on User {
    id
    name
    login
    avatarUrl(size: 150)
    location
    bio
    viewerCanFollow
    viewerIsFollowing
    url
}

fragment ShortActor on Actor {
    login
    avatarUrl(size: 150)
    url
}

fragment CommitFragment on Commit {
    author {
      name
      avatarUrl
    }
    message
    abbreviatedOid
    oid
    commitUrl
    authoredDate
    committedViaWeb
    id
}

fragment FullIssue on Issue {
    id
    databaseId
    number
    title
    bodyHTML
    body
    state
    createdAt
    updatedAt
    closed
    closedAt
    locked
    activeLockReason
    viewerSubscription
    viewerDidAuthor
    viewerCannotUpdateReasons
    viewerCanUpdate
    viewerCanSubscribe
    viewerCanReact
    userContentEdits(first: 0) {
      totalCount
    }
    author {
      avatarUrl
      login
      url
    }
    reactionGroups {
      ... Reactions
    }
    createdViaEmail
    repository {
      nameWithOwner
    }
}

fragment Reactions on ReactionGroup {
  content
  createdAt
  viewerHasReacted
  users(first: 0) {
    totalCount
  }
}